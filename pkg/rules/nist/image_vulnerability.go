package nist

import (
	"context"
	"fmt"
	"strings"

	"k8s-scanner/pkg/k8s"
	"k8s-scanner/pkg/types"
)

type ImageVulnerabilityRule struct{}

func NewImageVulnerabilityRule() *ImageVulnerabilityRule {
	return &ImageVulnerabilityRule{}
}

func (r *ImageVulnerabilityRule) ID() string {
	return "NIST-4.1.1"
}

func (r *ImageVulnerabilityRule) Title() string {
	return "Image vulnerability scanning"
}

func (r *ImageVulnerabilityRule) Description() string {
	return "Container images should be scanned for vulnerabilities and use specific tags, not 'latest'"
}

func (r *ImageVulnerabilityRule) Standard() string {
	return "nist"
}

func (r *ImageVulnerabilityRule) Section() string {
	return "4.1.1"
}

func (r *ImageVulnerabilityRule) Severity() types.Severity {
	return types.SeverityHigh
}

func (r *ImageVulnerabilityRule) Check(ctx context.Context, client interface{}) ([]types.Finding, error) {
	k8sClient, ok := client.(*k8s.Client)
	if !ok {
		return nil, fmt.Errorf("expected k8s client")
	}

	var findings []types.Finding

	pods, err := k8sClient.GetPods(ctx, "")
	if err != nil {
		return nil, fmt.Errorf("failed to get pods: %w", err)
	}

	for _, pod := range pods.Items {
		for _, container := range pod.Spec.Containers {
			if strings.HasSuffix(container.Image, ":latest") || !strings.Contains(container.Image, ":") {
				finding := types.Finding{
					ID:          r.ID(),
					Title:       r.Title(),
					Description: fmt.Sprintf("Container '%s' uses 'latest' tag or no tag", container.Name),
					Standard:    r.Standard(),
					Section:     r.Section(),
					Severity:    r.Severity(),
					Status:      types.StatusFailed,
					Resource: types.Resource{
						Kind:      "Pod",
						Name:      pod.Name,
						Namespace: pod.Namespace,
					},
					Remediation: "Use specific image tags instead of 'latest' and implement vulnerability scanning",
					References: []string{
						"https://csrc.nist.gov/publications/detail/sp/800-190/final",
						"https://kubernetes.io/docs/concepts/containers/images/",
					},
				}
				findings = append(findings, finding)
			}
		}
	}

	if len(findings) == 0 {
		findings = append(findings, types.Finding{
			ID:          r.ID(),
			Title:       r.Title(),
			Description: "All containers use specific image tags",
			Standard:    r.Standard(),
			Section:     r.Section(),
			Severity:    r.Severity(),
			Status:      types.StatusPassed,
			Resource: types.Resource{
				Kind: "Pod",
				Name: "all",
			},
			Remediation: "Continue using specific image tags and vulnerability scanning",
			References: []string{
				"https://csrc.nist.gov/publications/detail/sp/800-190/final",
				"https://kubernetes.io/docs/concepts/containers/images/",
			},
		})
	}

	return findings, nil
}